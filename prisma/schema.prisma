// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Strategy {
  id          String  @id @default(uuid())
  userId      String  @db.Text
  name        String  @db.Text
  description String  @db.Text
  photo       String  @db.Text
  isPublic    Boolean @default(false)

  params Param[]
  histories   History[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Param {
  id         String @id @default(uuid())
  strategyId String @db.Text
  name       String @db.Text
  description String? @db.Text
  value      String @db.Text
  min_filter_value      String? @db.Text
  max_filter_value      String? @db.Text  

  estrategy Strategy @relation(fields: [strategyId], references: [id], onDelete: Cascade)
  //historyParams     HistoryParam[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([strategyId])
}

model History {
  id           String   @id @default(uuid())
  strategyId   String   @db.Text
  strategy     Strategy @relation(fields: [strategyId], references: [id], onDelete: Cascade)

  currency     String   @db.Text
  deposit      String   @db.Text
  leverage     String   @db.Text
  period       String   @db.Text
  fromDate     DateTime
  toDate       DateTime
  symbol       String   @db.Text
  isSave    Boolean @default(false)

  //modifiedParams HistoryParam[] 

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([strategyId])
}

model HistoryParam {
  id         String @id @default(uuid())
  historyId  String @db.Text
  paramId    String @db.Text
  modifiedValue String @db.Text

  //history    History @relation(fields: [historyId], references: [id], onDelete: Cascade)
  //param      Param   @relation(fields: [paramId], references: [id], onDelete: Cascade)

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([historyId])
  @@index([paramId])
}
